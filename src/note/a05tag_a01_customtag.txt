1. //自定义标签：用于输出指定文件的内容.doTag()方法的实现：
	@Override
	public void doTag() throws JspException, IOException {
		PageContext pageContext = (PageContext) getJspContext();
		InputStream in = pageContext.getServletContext().getResourceAsStream(src);
		BufferedReader reader  = new BufferedReader(new InputStreamReader(in));
		String str = null;
//		 一行一行的读，记得换行.
		while((str = reader.readLine()) != null){	
//			如果文件的内容有标签，则需要转换一下，否则HTML读取到这个标签时，会当做一般的标签处理，而不会在页面上打印出来
//			 即：遇到 < 和 > 需要转换一下
//			解决方法：使用正则表达式：
			str = Pattern.compile("<").matcher(str).replaceAll("&lt");
			str = Pattern.compile(">").matcher(str).replaceAll("&gt");
			pageContext.getOut().println(str);
			pageContext.getOut().println("<br>");
		}
	}
	知识补充：
		BufferedReader 由Reader类扩展而来，提供通用的缓冲方式文本读取，而且提供了很实用的readLine，读取一个文本行，从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。
		一般用法：
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("ming.txt")));
		String data = null;
		while((data = br.readLine())!=null) { System.out.println(data); }

2. 自定义标签
	2.1 怎么自定义标签：HelloWorld（详情见：com.llm.a05tag.a01.customtag.HelloSimpleTag和WebContent/WEB-INF/mytag.tld）
		①. 创建一个标签处理器类: 实现 SimpleTag 接口（或者直接继承SimpleTagSupport类）. 
		②. 在 WEB-INF 文件夹下新建一个 .tld(标签库描述文件) 为扩展名的 xml 文件. 并拷入固定的部分: 并对 
			description, display-name, tlib-version, short-name, uri 做出修改
		要从c.tld文件中拷入固定的部分：
			<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
   				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    			xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
   				version="2.0">
 				<description>JSTL 1.1 core library</description>
 	 			<display-name>JSTL core</display-name>
  				<tlib-version>1.1</tlib-version>
  				<short-name>c</short-name>
  				<uri>http://java.sun.com/jsp/jstl/core</uri>
			</taglib>
		③. 在 tld 文件中描述自定义的标签:
			<!-- 描述自定义的 HelloSimpleTag 标签 -->
  			<tag>
  				<!-- 标签的名字: 在 JSP 页面上使用标签时的名字 -->
  				<name>hello</name>
  				<!-- 标签所在的全类名 -->
  				<tag-class>com.atllm.javaweb.tag.HelloSimpleTag</tag-class>
  				<!-- 标签体的类型 -->
  				<body-content>empty</body-content>
 			</tag>
		④. 在 JSP 页面上使用自定义标签: 
			> 使用 taglib 指令导入标签库描述文件: <%@taglib uri="http://www.atllm.com/mytag/core" prefix="atllm" %>
			> 使用自定义的标签: <atllm:hello/> 
	2.2 setJspContext: 一定会被 JSP 引擎所调用, 先于 doTag, 把代表 JSP 引擎的 pageContext 传给标签处理器类. 详情见：com.llm.a05tag.a01.customtag.HelloSimpleTag
		private PageContext pageContext;
		@Override
		public void setJspContext(JspContext arg0) {
			System.out.println(arg0 instanceof PageContext);  
			this.pageContext = (PageContext) arg0;
		}	
	2.3 自定义标签的实现顺序：
		① 通过jsp页面的uri找到对应的tld文件；
		② 通过tld文件中的<tag-class>标签找到标签的处理器类；
		③ 指定标签的处理器类，并将最终的执型结果返回给jsp页面做展示；
	
3. 带属性的自定义标签:
	① 先在标签处理器类中定义 setter 方法. 建议把所有的属性类型都设置为 String 类型. 
		private String value;
		private String count;
		public void setValue(String value) {
			this.value = value;
		}
		public void setCount(String count) {
			this.count = count;
		}
	② 在 tld 描述文件中来描述属性:
		<!-- 描述当前标签的属性 -->
		<attribute>
  			<!-- 属性名：需和标签处理器类的setXxx()方法定义的属性相同 -->
  			<name>value</name>
  			<!-- 该属性是否为必须： -->
  			<!-- 设定为true和false的区别：在jsp页面使用该标签时，设定为true的属性，一定会要求你写，设定为false的属性则不会要求你一定要写：<atllm:hello value=""/> -->
  			<required>true</required>
  			<!-- rtexprvalue:runtime expression value
  				当前属性是否可以接受运行时表达式的动态值： -->
  			<rtexprvalue>true</rtexprvalue>
  		</attribute>
	③. 在jsp页面中使用属性, 属性名同 tld 文件中定义的名字. 
		<atllm:hello value="${param.name }" count="10"/>

4. 通常情况下开发简单标签直接继承 SimpleTagSupport 就可以了. 可以直接调用其对应的 getter 方法得到对应的 API 
	public class SimpleTagSupport implements SimpleTag{
    	public void doTag() throws JspException, IOException{}
    	
   		private JspTag parentTag;
   		
    	public void setParent( JspTag parent ) {
        	this.parentTag = parent;
    	}
    	
    	public JspTag getParent() {
        	return this.parentTag;
    	}
    	
    	private JspContext jspContext;
    	
    	public void setJspContext( JspContext pc ) {
        	this.jspContext = pc;
  	  	}
  	  	
   		protected JspContext getJspContext() {
       		 return this.jspContext;
    	}
    
    	private JspFragment jspBody;
                
    	public void setJspBody( JspFragment jspBody ) {
        	this.jspBody = jspBody;
    	}
    
    	protected JspFragment getJspBody() {
       		return this.jspBody;
    	}   
	}
	
5. 带标签体的自定义标签: 
	5.1 若一个标签有标签体: 
		<atguigu:testJspFragment>abcdefg</atguigu:testJspFragment>
		在自定义标签的标签处理器中使用 JspFragment 对象封装标签体信息. 
	5.2 若配置了标签含有标签体, 则 JSP 引擎会调用 setJspBody() 方法把 JspFragment 传递给标签处理器类
		在 SimpleTagSupport 中还定义了一个 getJspBody() 方法, 用于返回 JspFragment 对象. 
	5.3. JspFragment 的 invoke(Writer) 方法: 把标签体内容从 Writer 中输出, 若为 null, 
		则等同于 invoke(getJspContext().getOut()), 即直接把标签体内容输出到页面上
		有时, 可以 借助于 StringWriter, 可以在标签处理器类中先得到标签体的内容: 
			//1. 利用 StringWriter 得到标签体的内容.
				StringWriter sw = new StringWriter();
				bodyContent.invoke(sw);
			//2. 把标签体的内容都变为大写
				String content = sw.toString().toUpperCase();
	5.4  在 tld 文件中, 使用 body-content 节点来描述标签体的类型: 
		<body-content>: 指定标签体的类型, 大部分情况下, 取值为 scriptless。可能取值有 3 种：
			① empty: 没有标签体	
			② scriptless: 标签体可以包含 el 表达式和 JSP 动作元素，但不能包含 JSP 的脚本元素
				不能包含jsp脚本元素是是什么意思？下面这种就是：
					<atllm:testJspFragment>hello:<%= request.getParameter("name") %></atllm:testJspFragment>
			③ tagdependent: 表示标签体交由标签本身去解析处理。
				若指定 tagdependent，在标签体中的所有代码都会原封不动的交给标签处理器，而不是将执行结果传递给标签处理器
				<body-content>tagdependent</body-content>
	
6. 开发有父标签的标签:
	6.1 父标签无法获取子标签的引用, 父标签仅把子标签作为标签体来使用. 
	6.2 子标签可以通过 getParent() 方法来获取父标签的引用(需继承 SimpleTagSupport 或自实现 SimpleTag 接口的该方法):
		若子标签的确有父标签, JSP 引擎会把代表父标签的引用通过  setParent(JspTag parent)  赋给标签处理器
	6.3 注意: 父标签的类型是 JspTag 类型. 该接口是一个空接口, 但是来统一 SimpleTag 和 Tag 的. 实际使用需要进行类型的强制转换.
	6.4 在 tld 配置文件中, 无需为父标签有额外的配置. 但, 子标签是是以标签体的形式存在的, 所以父标签的 <body-content></body-content>
		需设置为 scriptless

7. 实现下面这个带父标签的自定义标签：
	<c:choose>
		<c:when test="${param.age > 24}">大学毕业</c:when>
		<c:when test="${param.age > 20}">高中毕业</c:when>
		<c:otherwise>高中以下学历...</c:otherwise>
	</c:choose>
	思路如下：	
	> 开发 3 个标签: choose, when, otherwise
	> 其中 when 标签有一个 boolean 类型的属性: test
	> choose 是 when 和 otherwise 的父标签
	> when 在 otherwise 之前使用
	> 在父标签 choose 中定义一个 "全局" 的 boolean 类型的 flag为true: 用于判断子标签在满足条件的情况下是否执行：
		* 若 when 的 test 为 true, 且 when 的父标签的 flag 也为 true, 则执行 when 的标签体(正常输出标签体的内容), 
			同时把 flag 设置为 false
		* 若 when 的 test 为 true, 且 when 的父标签的 flag 为 false（此时说明when前面已经执行过一次了）, 则不执行标签体. 
		* 若 flag 为 true, otherwise 执行标签体. 

8. 实现 forEach 标签: 
	> 两个属性: items(集合类型, Collection), var(String 类型)
	> doTag: 
		① 遍历 items 对应的集合
		② 把正在遍历的对象放入到 pageContext 中, 键: var, 值: 正在遍历的对象. 
		③ 把标签体的内容直接输出到页面上. 
    <c:forEach items="${requestScope.customers }" var="cust2">
		${pageScope.cust2.id } -- ${cust2.name } <br>
	</c:forEach>
	<atguigu:saveAsFile src="d:\\haha.txt">
		abcde
	</atguigu>		

9. JSTL:
	3.1 *. c:out 主要用于对特殊字符进行转换. 真正进行输出时, 建议使用 c:out, 而不是使用 EL
	3.2 *. c:set: 可以为域赋属性值。 而对域对象中的 JavaBean 的属性赋值用的并不多. 
	3.3 c:remove: 移除指定域对象的指定属性值(较少使用, 即便移除也是在 Servlet 中完成)
	3.4 *. c:if: 在页面上对现实的内容进行过滤, 把结果存储到域对象的属性中. 但不灵活, 会被其他的自定义标签所取代. 
	3.5 c:choose, c:when, c:otherwise: 作用同上, 但麻烦, 不灵活.
	3.6 *. c:forEach: 对集合进行遍历的. 常用!
	3.7 c:forTokens: 处理字符串, 类似于 String 累的 split() 方法(知道即可)
	3.8 c:import: 导入页面到当前页面的. (了解)
	3.9 c:redirect: 当前页面进行重定向的. (使用较少)
	3.10 *. c:url: 产生一个 URL 的, 可以进行 URL 重写, 变量值编码, 较为常用. 