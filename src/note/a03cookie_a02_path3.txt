1. 相对路径和绝对路径:
	1.1 为什么要解决相对路径的问题: 在有一个 Servlet 转发页面的情况下, 会导致相对路径的混乱. 
		a.jsp: <a href="ToBServlet">To B Page2</a>
		ToBServlet: request.getRequestDispatcher("/dir/b.jsp").forward(request, response);
		注意, 此时点击 To B Page2 超链接后的浏览器的地址栏的值: http://localhost:8989/day_36/ToBServlet, 实际显示的是
		dir 路径下的 b.jsp
		而 b.jsp 页面有一个超链接: <a href="c.jsp">TO C Page</a>. 默认情况下, c.jsp 应该和 b.jsp 在同一路径下. 此时点击超链接
		将在浏览器地址栏显示: http://localhost:8989/day_36/c.jsp. 但在根目录下并没有 c.jsp, 所以会出现路径混乱的问题. 

2. 使用绝对路径会解决以上的问题:
	什么是绝对路径: 相对于当前 WEB 站点根目录的路径. 
	http://localhost:8989/day_36/c.jsp: 
		http://localhost:8989/ 是 WEB 站点的根目录, 
		/day_36 是 contextPath,
		/c.jsp 是相对于当前 WEB 应用的一个文件路径. 我们需要在当前 WEB 应用的任何的路径下都添加上 contextPath, 即可. 
	比如: 
	<a href="ToBServlet">To B Page2</a> 需改为: <a href="<%= request.getContextPath() %>/ToBServlet">To B Page2</a>
	response.sendRedirect("a.jsp"); 需改为: response.sendRedirect(request.getContextPath() + "/a.jsp");
	<form action="AddServlet"></form> 需改为: <form action="<%= request.getContextPath() %>/AddServlet"></form>
	
3. 在 JavaWEB 应用中 / 代表的是: 有时代表当前 WEB 应用的根目录, 有时代表的是站点的根目录.
	/ 代表的是当前 WEB 应用的根路径: 若 / 所在的命令或方法需被 WEB 服务器解析, 而不是直接打给浏览器, 则 / 代表 WEB 应用的根路径. 此时编写
		① 绝对路径就不需要在添加 contextPath 了. 
		② 在 web.xml 文件中做 Serlvet 映射路径时. 
		③ 在请求转发: request.getRequestDispatcher("/dir/b.jsp").forward(request, response);
	/ 代表的是站点的根目录: 若 / 直接交由浏览器解析, / 代表的就是站点的根路径, 此时必须加上 contextPath
		① <form action="/AddServlet"></form> 
		② response.sendRedirect("/a.jsp");

4. 如何获取 contextPath: 
	ServletContext： getContextPath()
	HttpServletRequest: getContextPath()

5. 上一层目录：../ 

	当前路径：./